" Malcolm Ramsay  .vimrc
"
"General {{{

if !has('nvim')
    set nocompatible        " explicitly get of of vi compatible mode
    set encoding=utf-8
endif

" load plugins
source $HOME/dotfiles/vim/plugins.vim

" Vim automatically reads changes to a file
set autoread
" Reload changes on FocusGained
autocmd! BufEnter * :checktime

filetype plugin indent on      "load filetype specific indent and plugin files

set hidden

" Python support
if isdirectory($HOME."/.miniconda3")
    if !has('python3')
        let g:python3_host_prog = $HOME.'/.miniconda3/envs/neovim3/bin/python'
    endif
    let g:python_host_prog = $HOME.'/.miniconda3/envs/neovim2/bin/python'
elseif isdirectory($HOME."/.pyenv")
    if !has('python3')
        let g:python3_host_prog = $HOME.'/.pyenv/versions/neovim3/bin/python'
    endif
    let g:python_host_prog = $HOME.'/.pyenv/versions/neovim2/bin/python'
endif

let g:email = "malramsay64@gmail.com"
let g:username = "Malcolm Ramsay"

" Use existing neovim session if opening from terminal
if has('nvim') && executable('nvr')
  let $VISUAL = 'nvr -cc split --remote-wait'
endif

"}}}
"Colours {{{

syntax enable           " enable syntax processing

" Enable truecolour support in neovim >= 0.1.5 || vim >= 7.4.1799
if has("termguicolors")
    set termguicolors
endif



" Load colourscheme in vim with tmux
if !has("nvim")
    set t_8b=[48;2;%lu;%lu;%lum
    set t_8f=[38;2;%lu;%lu;%lum
endif

" Allow italics in terminal
let g:one_allow_italics = 1

augroup colours
    autocmd!
    let s:colours = onedark#GetColors()
    let s:self_color = s:colours.comment_grey
    autocmd ColorScheme * call onedark#set_highlight("pythonSelf", { "fg": s:self_color, "gui": "italic", "cterm": "italic" })
    autocmd ColorScheme * call onedark#set_highlight("overLength", { "bg": s:colours.special_grey}) 
    autocmd FileType * match none
    autocmd FileType python match overLength /\%>80v.\+/
augroup END

" Set colourshecme
set background=dark " for the dark version
colorscheme onedark

" Colourscheme override
highlight Comment cterm=italic gui=italic
highlight pythonSelf cterm=italic gui=italic

"}}}
"Spaces and Tabs {{{

set tabstop=4           " number of visual spaces per TAB

set softtabstop=4       " number of spaces inserted upon TAB

set shiftwidth=4        " autoindent amount when using cindent

set expandtab           " TAB inserts softtabstop spaces

set autoindent          " copy indentation from previous line

set smartindent         " inserts extra indentation in some cases

set list                " we want to show tabs

set listchars=tab:>-,trail:-    " show tabs and trailing whitespace

" Remove trailing whitespace from file and return cursor to current position
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l,c)
endfun

" Remove whitespace before writing to files
augroup StripWhitespaces
    autocmd!
    autocmd BufWritePre *.h,*.c,*.cpp,Makefile,*.hoomd,*.py :call <SID>StripTrailingWhitespaces()
augroup END

"}}}
"UI Config {{{

" The combination of relative number and number gives the absolute line
" number for the current line and relative numbers for all others
set relativenumber      " show relative line numbers

set number              " show line numbers

set scrolloff=5         " 5 lines above and below cursor when scrolling

set wildmenu            " visual autocomplete for command

set lazyredraw          " redraw only when need to

set showmatch           " highlight matching parenthesis/bracket/brace

set laststatus=2        " Display statusline

set splitright          "open splits by default to the right

" remap help to open in a vertical split
"cabbrev help vert help
"cabbrev  h vert h

" common mistypings of exit and save
cabbrev W w
cabbrev Q q
cabbrev Wq wq
cabbrev WQ wq

" Disable mouse 
"set mouse=

"}}}
" Custom Shortcuts {{{

" Neovim terminal mappings
if has('nvim')
    tnoremap <C-w>h <C-\><C-N><C-w>h
    tnoremap <C-w>j <C-\><C-N><C-w>j
    tnoremap <C-w>k <C-\><C-N><C-w>k
    tnoremap <C-w>l <C-\><C-N><C-w>l
endif

" jk is escape
inoremap jk <esc>
inoremap jK <esc>
inoremap JK <esc>
inoremap Jk <esc>

" leader is <space>
let mapleader="\<space>"

" go to next split
nnoremap <Leader>w <c-w>w
" Turn off search highlighting
nnoremap <Leader>h :nohlsearch<CR>
" Reload vimrc
nnoremap <Leader>r :source $MYVIMRC<CR>
" Edit vimrc
nnoremap <Leader>er :edit $MYVIMRC<CR>
" Edit plugins
nnoremap <Leader>ep :edit $DOTFILES/vim/plugins.vim<CR>
" Edit UnltiSnips
nnoremap <Leader>es :UltiSnipsEdit<CR>
" Edit in ftplugin directory
nnoremap <Leader>ef :edit ~/.vim/ftplugin<CR>
" Edit in tmux config
nnoremap <Leader>et :edit ~/.tmux.conf<CR>
" Edit bashrc
nnoremap <Leader>eb :edit ~/.bashrc<CR>
" Edit zshrc
nnoremap <Leader>ez :edit ~/.zshrc<CR>
" Edit vim direcotry
"nnoremap <Leader>ed :edit $DOTFILES/vim/<CR>
" Edit denite config
nnoremap <Leader>ed :edit $DOTFILES/vim/denite.vim<CR>
" <C-s> will correct previous spelling misake and set undo point
nnoremap <C-s> [s1z=<c-o>
inoremap <C-s> <c-g>u<Esc>[s1z=`]A<c-g>u
" navigate between tabs
nnoremap ]w :tabnext<CR>
nnoremap [w :tabprev<CR>

" Shortcut for saving as root
cmap w!! w !sudo tee > /dev/null %

"}}}
"Searching {{{

set incsearch " search as characters entered

set hlsearch  " highlight matches

set ignorecase " ignore case when seraching

set smartcase " overrides ignorecase if uppercase characters in search query

set magic     " regular expressions

"}}}
"Folding {{{

set foldenable        " enable folding

set foldlevelstart=999  " have all levels open by default

set foldnestmax=6     " 6 nested folds max

"set foldmethod=indent " fold based on indent

" set modelines=1       " last line of file is checked to run as a command

"}}}
"Movement {{{

"move verticaly by visual line
"nnoremap j gj
"nnoremap k gk

set backspace=eol,start,indent  " backspace deletes newlines

set whichwrap+=<,>,h,l,[,]      " left right wraps to next/previous lines

" return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$")|
    \   exe "normal! g`\"" |
    \ endif


"}}}
"Backups {{{

set backup          " Performs backups
set writebackup     " perform backup

" Backup directories
set backupdir=~/.vim-tmp,~/.tmp,/tmp/vim
set directory=~/.vim-tmp,~/.tmp,/tmp/vim


set undofile        "persistent undo
set undodir=~/.vim-tmp/undo     "undo directory

"}}}
"Spelling and Files{{{

set spelllang=en_au             " spelling language is english australian
set fileformats=unix,mac,dos    " default line ending is unix

" set filetype defaults
augroup filetypes
    autocmd!
    autocmd BufNewFile,BufRead *.md set ft=markdown
    if has('nvim')
        autocmd TermOpen * setlocal nonumber norelativenumber
    endif
augroup END

"}}}
" Plugin Configuration {{{
source $DOTFILES/vim/denite.vim

" netrw {{{

" Open explorer to current directory
"nnoremap <Leader>n :20Lexplore<CR>

"let g:netrw_browse_split = 4
"let g:netrw_preview = 1
"let g:netrw_altv = 1
"let g:netrw_liststyle = 3
"let g:netrw_keepdir = 0

" }}}
" nerdtree {{{

" Open explorer to current directory
"nnoremap <Leader>n :NERDTreeToggle<CR>

" }}}
" airline {{{

let g:airline_powerline_fonts = 1

" Only check for indent and mixed-indent whitespace errors
let g:airline#extensions#whitespace#checks = [ 'indent', 'mixed-indent-file' ]

" Have a wordcount in the following files (search regex)
let g:airline#extensions#wordcount#enabled = 1
let g:airline#extensions#wordcount#filetypes = '\vhelp|vimwiki|markdown|rst|org|text|asciidoc|tex'

"}}}
" Vimwiki {{{

"nmap <Leader>w :vsp<CR><Plug>VimwikiIndex
nmap <Leader>wj <Plug>VimwikiDiaryPrevDay
nmap <Leader>wk <Plug>VimwikiDiaryNextDay

let g:vimwiki_folding = 'syntax'

" Wiki settings
let wiki_default = {}
let wiki_default.auto_export = 0
let wiki_default.auto_toc = 0
let wiki_default.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'sh': 'sh'}

let home_wiki = copy(wiki_default)
let home_wiki.path = '~/Documents/notes/personal/'
let home_wiki.diary_rel_path = 'diary/'
let home_wiki.path_html = '~/Documents/notes/html/personal/'

let phd_wiki = copy(wiki_default)
let phd_wiki.path = '~/Documents/notes/PhD/'
let phd_wiki.diary_rel_path = 'logbook/'
let phd_wiki.diary_header = 'PhD Logbook'

let flurosat_wiki = copy(wiki_default)
let flurosat_wiki.path = '~/Documents/notes/FluroSat/'

let md_phd_wiki = copy(wiki_default)
let md_phd_wiki.path = '~/Documents/notes/PhDmd/'
let md_phd_wiki.syntax = 'markdown'
let md_phd_wiki.ext = '.mkd'
let md_phd_wiki.diary_rel_path = 'logbook/'
let md_phd_wiki.diary_header = 'PhD Logbook'

let g:vimwiki_ext2syntax = {'.mkd': 'markdown'}

let g:vimwiki_list = [home_wiki, phd_wiki, flurosat_wiki, md_phd_wiki]
"nmap <Leader>wp 2<Leader>ww<Leader>w<Leader>w
"nmap <Leader>ww <count>
"nmap <Leader>wo :2VimwikiDiaryIndex<CR>

"}}}
" TaskWiki {{{

let g:taskwiki_sort_order='urgency+,due+,project+'

"autocmd! BufReadPost,BufNewFile * set filetype=taskedit

" }}}
" fugitive {{{

nmap <Leader>gc :Gcommit<CR>
"nmap <Leader>gs :Gstatus<CR>

" }}}
" neomake {{{

" open loclist quickfix list if errors
let g:neomake_open_list = 2

" run neomake on write
autocmd! BufWritePost * Neomake

" Change colour of warning signs
augroup my_error_signs
    autocmd!
    autocmd ColorScheme * hi NeomakeErrorSign ctermfg=red
    autocmd ColorScheme * hi NeomakeWarningSign ctermfg=yellow
augroup END

let g:neomake_python_enabled_makers = ['pydocstyle', 'pycodestyle', 'pylint', 'mypy']
let g:neomake_python_pycodesyle_args = ['--ignore=E123']

nmap <leader>nd :NeomakeDisable<CR>
nmap <leader>nt :NeomakeToggle<CR>
nmap <leader>ne :NeomakeEnable<CR>

" }}}
" vim-taskwarrior {{{

" Highlighting field
let g:task_highlight_field = 0

" Long descriptions
let g:task_rc_override = 'rc.defaultwidth=0'

" Allow changes to data
let g:task_readonly = 0

" Change default fields
let g:task_default_prompt = ['description', 'project', 'tags', 'priority', 'due']

"let g:task_gui_term = 0

" }}}
" deoplete {{{
if has('python3')
    let g:deoplete#enable_at_startup = 1

    let g:deoplete#max_list=15
    let g:deoplete#auto_complete_delay = 100

    " <C-h>: close popup
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"

    " <CR> gives newline
    "/inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
        return deoplete#smart_close_popup() . "\<CR>"
    endfunction

    " Enable echodoc to show function variables in command bar
    set noshowmode
    let g:echodoc_enable_at_startup = 1

    " Remove preview window 
    set completeopt-=preview
    "autocmd CompleteDone * pclose!

    " c++ support
    "let g:deoplete#sources#clang_path="/usr/local/opt/llvm/lib/libclang.dylib"
    "let g:deoplete#sources#clang_header="/usr/local/opt/llvm/include/clang/"
    "let g:clang_library_path="/usr/local/opt/llvm/lib/libclang.dylib"
    "let g:deoplete#sources#clang#debug = 1
    "if get(g:, 'deoplete#sources#clang#debug', 0)
    "autocmd! InsertEnter *
    "\ call deoplete#enable_logging('DEBUG', 'deoplete.log')
    "endif
endif

"}}}
" clang_complete {{{
let g:clang_use_library = 1
let g:clang_library_path='/usr/local/opt/llvm/lib'

let g:clang_user_options = '-std=c+=11'
let g:clang_complete_auto = 1
let g:clang_hl_errors = 1
let g:clang_snippets = 1
let g:clang_snippets_engine = 'ultisnips'
let g:clang_close_preview = 1
let g:clang_auto_select = 1
let g:clang_omnicppcomplete_compliance = 0
let g:clang_make_default_keymappings = 0
" }}}
" ultisnips {{{

let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"

let g:UltiSnipsEditSplit="horizontal"

" Set the documentation style for the snippets
let g:ultisnips_python_style="google"

" Configuration settings
let g:snips_author = "Malcolm Ramsay"
let g:snips_email = "malramsay64@gmail.com"
let g:snips_github = "https://github.com/malramsay64"

" Directories
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"

" }}}
" vimtex {{{

let g:tex_flavor='latex'

" enable vimtex
let g:vimtex_enabled = 1

" Folding options
let g:vimtex_fold_enabled = 1
let g:vimtex_fold_manual = 1

" latexmk options

let g:vimtex_latexmk_enabled = 1
let g:vimtex_latexmk_build_dir = 'output'

" }}}
" vmath {{{
vmap <expr> ++ VMATH_YankAndAnalyse()
nmap ++ vip++
" }}}
" litecorrect {{{
augroup litecorrect
    autocmd!
    autocmd FileType markdown,mkd call litecorrect#init()
    autocmd FileType text call litecorrect#init()
    autocmd FileType vimwiki call litecorrect#init()
augroup END
" }}}
" incsearch {{{
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" }}}
" grammarous {{{

augroup grammarous
    autocmd!
    autocmd BufWritePost *.md,*.mkd GrammarousCheck
    autocmd BufWritePost *.wiki GrammarousCheck
    "autocmd FileType text :GrammarousCheck
augroup END

let g:grammarous#use_vim_spelllang = 1
let g:grammarous#move_to_first_error = 0
let g:grammarous#default_lang = "en_au"

" }}}
" isort {{{

augroup isort
    autocmd!
    autocmd BufWritePre *.py Isort
augroup END

let g:vim_isort_python_version = 'python3'

"}}}
" split-term {{{
"let g:split_term_vertical = 0

let g:disable_key_mappings = 1

"}}}
" markdown composer {{{
let g:markdown_composer_refresh_rate=5000
" }}}
" jedi-vim {{{

let g:jedi#completions_command=''
let g:jedi#rename_command = '<leader>jr'
let g:jedi#usages_command = '<leader>jn'

let g:jedi#completions_enabled = 0
let g:jedi#popup_on_dot = 0

" }}}
" vim-template {{{
let g:templates_directory = [$DOTFILES.'/vim/templates']

" }}}
" citation {{{

let g:citation_vim_bibtex_file='~/Documents/PhD/bibtex/library.bib'
let g:citation_vim_mode='bibtex'
let g:citation_vim_cache_path='~/.vim/citation_cache'
let g:citation_vim_et_al_limit=5

let g:citation_vim_description_format = "{} ‴{}‴ \˝{}\˝ ‹{}› ₋{}₋ ₍{}₎"
let g:citation_vim_description_fields = ["key", "title", "journal", "doi", "author", "year"]

" }}}
" easygit {{{ 

"let g:easygit_enable_command = 1
"let g:easygit_auto_lcd = 1

" }}}
" ranger {{{

map <leader>rr :RangerEdit<cr>
map <leader>rv :RangerVSplit<cr>
map <leader>rs :RangerSplit<cr>
map <leader>rt :RangerTab<cr>
map <leader>ri :RangerInsert<cr>
map <leader>ra :RangerAppend<cr>
map <leader>rc :set operatorfunc=RangerChangeOperator<cr>g@
map <leader>rR :set operatorfunc=RangerBrowseEdit<cr>g@
map <leader>rT :set operatorfunc=RangerBrowseTab<cr>g@
map <leader>rS :set operatorfunc=RangerBrowseSplit<cr>g@
map <leader>rV :set operatorfunc=RangerBrowseVSplit<cr>g@

" }}}
" Goyo {{{

let g:goyo_width = 120

function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  call deoplete#disable()
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  call deoplete#enable()
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" }}}
" vim:foldmethod=marker:foldlevel=1:filetype=vim
