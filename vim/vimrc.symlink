" Malcolm Ramsay  .vimrc
"
"General {{{

set nocompatible        " explicitly get of of vi compatible mode

" Pathogen

"runtime bundle/pathogen/autoload/pathogen.vim
"execute pathogen#infect()

" Vundle package manager

source $HOME/dotfiles/vim/vundle.vim

set encoding=utf-8

" Vim automatically reads changes to a file
set autoread

"}}}
"Colours {{{

" Get colours from the terminal
let base16colorspace=256
if $BACKGROUND
    execute "set background=".$BACKGROUND
    execute "colorscheme ".$THEME
else
    set background=dark
    colorscheme base16-solarized
endif

syntax enable           "enable syntax processing

"set cursorline          " highlights current line

hi clear CursorLine     " clears highlighting of cursorline

" automatically clears highlighting of cursor line
"augroup CLClear
    "autocmd! ColorScheme * hi clear CursorLine
"augroup END

" Colours line numbers dark grey
hi LineNr ctermfg=DarkGrey

" Highlights current line number as white
hi CursorLineNr term=bold ctermfg=White cterm=bold gui=bold guifg=White

" Spell check colours
hi SpellBad cterm=NONE ctermfg=Red ctermbg=NONE
hi SpellCap cterm=NONE ctermfg=Yellow ctermbg=NONE
hi SpellRare cterm=NONE ctermfg=Blue ctermbg=NONE
hi SpellLocal cterm=NONE ctermfg=Green ctermbg=NONE

" Status line colours
"hi StatusLine cterm=NONE ctermfg=244

" Comment Colours
hi Comment ctermfg=DarkGrey

" Matching parentheses colours
hi MatchParen cterm=none ctermfg=Cyan ctermbg=none

"}}}
"Spaces and Tabs {{{

"filetype on             " enable filetype detection

"filetype plugin on      " search .vim/ftplugin for filetype

filetype plugin indent on      "load filetype specific indent files

set tabstop=4           " number of visual spaces per TAB

set softtabstop=4       " number of spaces inserted upon TAB

set shiftwidth=4        " autoindent amount when using cindent

set expandtab           " TAB inserts softtabstop spaces

set autoindent          " copy indentation from previous line

set smartindent         " inserts extra indentation in some cases

set list                " we want to show tabs

set listchars=tab:>-,trail:-    " show tabs and trailing whitespace

" Remove trailing whitespace from file and return cursor to current position
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l,c)
endfun

" Remove whitespace before writing to files
augroup StripWhitespaces
    autocmd!
    autocmd BufWritePre *.h,*.c,*.cpp,Makefile,*.hoomd,*.py :call <SID>StripTrailingWhitespaces()
augroup END

"}}}
"UI Config {{{

" The combination of relative number and number gives the absolute line
" number for the current line and relative numbers for all others
set relativenumber      " show relative line numbers
set number              " show line numbers

set scrolloff=5         " 5 lines above and below cursor when scrolling

"set cursorline         "highlight current line


set wildmenu            " visual autocomplete for command

set lazyredraw          " redraw only when need to

set showmatch           " highlight matching parenthesis/bracket/brace

set laststatus=2        " Display statusline

set splitright          "open splits by default to the right

" remap help to open in a vertical split
abbrev help vert help
abbrev  h vert h

"set statusline=%F\ %y\ %=%p%%\ [%l,%v]
 "              | | | | |  |   |      | |   |    |  |
 "              | | | | |  |   |      | |   |    |  + current column
 "              | | | | |  |   |      | |   |    +-- current line
 "              | | | | |  |   |      | |   +-- current % into file
 "              | | | | |  |   |      | +-- right align
 "              | | | | |  |   |      +-- current syntax in square brackets
 "              | | | | |  |   +-- current fileformat
 "              | | | | |  +-- number of lines
 "              | | | | +-- preview flag in square brackets
 "              +-- full path to file in the buffer

 " common mistypings of exit and save
cab W w
cab Q q
cab Wq wq
cab WQ wq

" Autocomplete
let g:SuperTabDefaultCompletionType = "<c-p>"

"}}}
"Leader Shortcuts {{{

source $HOME/dotfiles/vim/mapping.vim

"}}}
"Searching {{{

set incsearch           " search as characters entered

set hlsearch            " highlight matches

set ignorecase          " ignore case when searching

set magic               " regular expressions

"}}}
"Folding {{{

set foldenable          " enable folding

set foldlevelstart=5    "have 5 levels open by default

set foldnestmax=1      "10 nested fold max

set foldmethod=indent   " fold based on indent

"set modelines=1         " last line of file is checked to run as a command

"}}}
"Movement {{{

"move verticaly by visual line
nnoremap j gj
nnoremap k gk

set backspace=eol,start,indent  " backspace deletes newlines

set whichwrap+=<,>,h,l,[,]      " left right wraps to next/previous lines

" return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$")|
    \   exe "normal! g`\"" |
    \ endif


"}}}
"Backups {{{

set backup          " Performs backups
set writebackup     " perform backup

" Backup directories
set backupdir=~/.vim-tmp,~/.tmp,/tmp/vim
set directory=~/.vim-tmp,~/.tmp,/tmp/vim


set undofile        "persistent undo
set undodir=~/.vim-tmp/undo     "undo directory

"}}}
"Spelling and Files{{{

set spelllang=en_au             " spelling language is english australian
set fileformats=unix,mac,dos    " default line ending is unix

autocmd BufNewFile,BufRead *.hoomd set ft=python

"}}}
" Plugin Configuration {{{

""" Syntastic
" Use error signs
let g:syntastic_enable_signs = 1
highlight SyntasticErrorSign ctermfg=LightRed ctermbg=Yellow

" c++11 support
let g:syntastic_cpp_compiler_options = '-std=c++11 -I$HOME/.local/include'

" Python3 syntax checking
let g:syntastic_python_python_exec = 'python'
let g:syntastic_python_checkers = ['pylint', 'python']

" Latex checking
let g:syntastic_tex_checkers = ['lacheck']

" Bash linting
let g:syntastic_sh_checkers = ['shellcheck', 'sh']
"
" Configure when error checks are run
" Run on open/save
let g:syntastic_check_on_open = 1
" No checks just before quitting
let g:syntastic_check_on_wq = 0

" Configure location list
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

""" airline

let g:airline_theme='base16_solarized'
let g:airline_powerline_fonts = 1

let g:airline#extensions#whitespace#checks = [ 'indent', 'mixed-indent-file' ]


if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" Vimwiki

nmap <Leader>w :vsp<CR><Plug>VimwikiIndex
nmap <Leader>wk <Plug>VimwikiDiaryPrevDay
nmap <Leader>wj <Plug>VimwikiDiaryNextDay

"Use markdown syntax
let g:vimwiki_list = [{  'path':    '~/.wiki/',
                       \ 'syntax':  'default',
                       \ 'ext':     '.wiki',
                       \ 'auto_toc':    1,
                       \ 'auto_export':    1,
                       \ 'diary_rel_path': '../.diary',
                       \ 'path_html': '~/wiki_html'}]

" fugitive

nmap <Leader>gc :Gcommit<CR>

" }}}
" vim:foldmethod=marker:foldlevel=0:filetype=vim
