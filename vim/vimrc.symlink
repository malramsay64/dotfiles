" Malcolm Ramsay  .vimrc
"
"General {{{

if !has('nvim')
    set encoding=utf-8
endif

scriptencoding utf-8

source $HOME/dotfiles/vim/plugins.vim   " load plugins

set autoread                            " Vim automatically reads changes to a file

augroup vimrc
    autocmd!
    autocmd BufEnter * :checktime       " Reload changes on FocusGained
augroup END

filetype plugin indent on               " load filetype specific indent and plugin files

""" Python configuration
let g:loaded_python_provider = 1

if isdirectory($HOME.'/.pyenv')
    let g:python3_host_prog = $HOME.'/.pyenv/versions/neovim/bin/python'
endif

let g:email = 'malramsay64@gmail.com'
let g:username = 'Malcolm Ramsay'

" Use existing neovim session if opening from terminal
if has('nvim') && executable('nvr')
  let $VISUAL = $HOME."/.miniconda/envs/neovim3/bin/nvr -cc split --remote-wait +'set bufhidden=wipe'"
endif

if exists('&belloff')
    set belloff=all                     " Turn off all bells
endif

"}}}
"Colours {{{

syntax enable                           " enable syntax processing

" Enable truecolour support in neovim >= 0.1.5 || vim >= 7.4.1799
if has('termguicolors')
    set termguicolors
endif

" Load colourscheme in vim with tmux
if !has('nvim')
    set t_8b=[48;2;%lu;%lu;%lum
    set t_8f=[38;2;%lu;%lu;%lum
endif

""" Configure Colourschems
let g:one_allow_italics = 1
let g:quantum_italics=1

" Colourscheme override
augroup colourOverride
   autocmd!
   " Italic self in python
   "autocmd ColorScheme * highlight Identifier gui=italic
   autocmd ColorScheme * highlight Conceal guibg=NONE
   autocmd Colorscheme * highlight SpellBad guibg=NONE
   autocmd Colorscheme * highlight SpellCap guibg=NONE
   autocmd Colorscheme * highlight SpellLocal guibg=NONE
   autocmd Colorscheme * highlight SpellRare guibg=NONE
   autocmd Colorscheme * highlight CursorLineNr guibg=NONE
augroup END

set background=dark " for the dark version
"colorscheme onedark
colorscheme quantum


" }}}
"Spaces and Tabs {{{

set tabstop=4           " number of visual spaces per TAB
set softtabstop=4       " number of spaces inserted upon TAB
set shiftwidth=4        " autoindent amount when using cindent
set expandtab           " TAB inserts softtabstop spaces

set autoindent          " copy indentation from previous line
set nosmartindent         " inserts extra indentation in some cases


" Remove trailing whitespace from file and return cursor to current position
function! StripTrailingWhitespaces()
    let l:pos = winsaveview()
    execute('%s/\s\+$//e')
    call winrestview(l:pos)
endfun

nnoremap <Space>zz :call StripTrailingWhitespaces()<CR>


"}}}
"UI Config {{{

" The combination of relative number and number gives the absolute line
" number for the current line and relative numbers for all others
set relativenumber             " show relative line numbers
set number                     " show line numbers
set scrolloff=5                " 5 lines above and below cursor when scrolling
set wildmenu                   " visual autocomplete for command
set wildmode=longest:full,full " Complete to longest matching text then first match. Like shell completion
set lazyredraw                 " redraw only when need to
set hidden                     " allows you to hide buffers with unsaved changes without being prompted
set noshowmatch                " highlight matching parenthesis/bracket/brace
set laststatus=2               " Display statusline
set splitright                 " open splits by default to the right
set nosplitbelow               " open splits above current
set formatoptions+=n           " smart auto-indenting inside numbered lists
set formatoptions+=j           " smart comment joining
set nojoinspaces               " don't autoinsert two spaces after '.', '?', '!' for join command
set textwidth=100              " Textwidth is 100 columns
set clipboard=unnamed          " Use the system clipboard

" common mistypings of exit and save
cabbrev W w
cabbrev Q q
cabbrev Wq wq
cabbrev WQ wq

" Unicode UI elements
if has('linebreak')
  let &showbreak='‚§∑ '          " ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS (U+2937, UTF-8: E2 A4 B7)
endif
set fillchars=vert:‚îÇ           " BOX DRAWINGS LIGHT VERTICAL (U+2502, UTF-8: E2 94 82)

set list                       " we want to show whitespace elements
set listchars=tab:‚ñ∂‚Äí
set listchars+=nbsp:‚ê£
set listchars+=extends:¬ª       " RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB, UTF-8: C2 BB)
set listchars+=precedes:¬´      " LEFT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00AB, UTF-8: C2 AB)
set listchars+=trail:‚Ä¢         " BULLET (U+2022, UTF-8: E2 80 A2)

"" Movement
set backspace=eol,start,indent  " backspace deletes newlines
set whichwrap+=<,>,h,l,[,]      " left right wraps to next/previous lines

" Movement between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Consistency with yank
nnoremap Y y$

augroup gopass_security
    " Don't backup gopass files.
    autocmd BufNewFile,BufRead /dev/shm/gopass.* setlocal noswapfile nobackup noundofile
augroup end

"}}}
" Custom Shortcuts {{{

" Neovim terminal mappings
if has('nvim')
    tnoremap <C-h> <C-\><C-N><C-w>h
    tnoremap <C-j> <C-\><C-N><C-w>j
    tnoremap <C-k> <C-\><C-N><C-w>k
    tnoremap <C-l> <C-\><C-N><C-w>l
endif

" jk is escape
inoremap jk <esc>
inoremap jK <esc>
inoremap JK <esc>
inoremap Jk <esc>

" leader is <space>
let g:mapleader="\<space>"

" go to next split
nnoremap <Leader>w <c-w>w
" Turn off search highlighting
nnoremap <Leader>h :nohlsearch<CR>
" Reload vimrc
nnoremap <Leader>r :source $MYVIMRC<CR>
" Edit vimrc
nnoremap <Leader>er :edit $MYVIMRC<CR>
" Edit plugins
nnoremap <Leader>ep :edit $DOTFILES/vim/plugins.vim<CR>
" Edit UnltiSnips
nnoremap <Leader>es :UltiSnipsEdit<CR>
" Edit in ftplugin directory
nnoremap <Leader>ef :edit ~/.vim/ftplugin<CR>
" Edit in tmux config
nnoremap <Leader>et :edit ~/.tmux.conf<CR>
" Edit bashrc
nnoremap <Leader>eb :edit ~/.bashrc<CR>
" Edit zshrc
nnoremap <Leader>ez :edit ~/.zshrc<CR>
" Edit vim direcotry
"nnoremap <Leader>ed :edit $DOTFILES/vim/<CR>
" Edit denite config
nnoremap <Leader>ed :edit $DOTFILES/vim/denite.vim<CR>
" <C-s> will correct previous spelling misake and set undo point
nnoremap <C-s> [s1z=<c-o>
inoremap <C-s> <c-g>u<Esc>[s1z=`]a<c-g>u
" navigate between tabs
nnoremap ]w :tabnext<CR>
nnoremap [w :tabprev<CR>
" Remap for digraphs
inoremap <C-y> <C-k>

" Open last buffer
nnoremap <leader><leader> <C-^>

" Swap semicolon and colon for easier commands
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" Shortcut for saving file as root
cmap w!! w !sudo tee > /dev/null %

" Faster window resizing
nnoremap <C-w>- :5wincmd -<CR>
nnoremap <C-w>= :5wincmd +<CR>
nnoremap <C-w>+ :wincmd =<CR>
nnoremap <leader>vj :5wincmd +<CR>
nnoremap <leader>vk :5wincmd -<CR>
nnoremap <space>w= :wincmd =<CR>

"}}}
"Searching {{{

set incsearch " search as characters entered
set hlsearch  " highlight matches
set ignorecase " ignore case when seraching
set smartcase " overrides ignorecase if uppercase characters in search query

set magic     " regular expressions

" Use ripgrep for search if available
if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

"}}}
"Folding {{{

set foldenable         " enable folding
set foldlevelstart=5   " have all levels open by default
set foldnestmax=2      " Maximum number of nested folds
set foldmethod=syntax  " fold based on indent

set modelines=1        " last line of file is checked to run as a command

"}}}
"Backups {{{

if exists('$SUDO_USER')
    set nobackup        " Don't write backups for root files
    set nowritebackup   " No backups when root user
    set noswapfile      " no swap files for root user

    if has('persistent_undo')
        set noundofile  " no undo for root user
    endif
else
    set backup          " Performs backups
    set writebackup     " perform backup
    set backupdir=~/.vim-tmp,~/.tmp,. " Backup directories

    set directory=~/.vim-tmp/swap//,~/.tmp/swap//,. " Directories for swap files

    if has('persistent_undo')
        set undofile
        set undodir=~/.vim-tmp/undo     "undo directory
        set undodir+=~/.tmp/undo
        set undodir+=.
    endif
endif

"}}}
"Spelling and Files{{{

set spelllang=en_au             " spelling language is english australian
set fileformats=unix,mac,dos    " default line ending is unix

" set filetype defaults
augroup filetypes
    autocmd!
    if has('nvim')
        autocmd TermOpen * setlocal nonumber norelativenumber
    endif
augroup END

"}}}
" Plugin Configuration {{{

" fzf {{{
"
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'belowright 10split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

nnoremap <silent> <C-p> :<C-u>GFiles<CR>
nnoremap <silent> <leader>p :<C-u>Files<CR>
nnoremap <Leader>gf :<C-u>Commits<CR>
nnoremap <leader>b :<C-U>Buffers<CR>

" }}}
" fugitive {{{

nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>

" }}}
" ale {{{

let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

let g:ale_lint_on_text_changed = 1
let g:ale_lint_delay = 1000
let g:ale_lint_on_save = 1

" }}}
" ultisnips {{{

let g:UltiSnipsExpandTrigger='<C-k>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-tab>'

let g:UltiSnipsEditSplit='horizontal'

" Set the documentation style for the snippets
let g:ultisnips_python_style='google'

" Configuration settings
let g:snips_author = 'Malcolm Ramsay'
let g:snips_email = 'malramsay64@gmail.com'
let g:snips_github = 'https://github.com/malramsay64'

" Directories
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'

" }}}
" vimtex {{{

let g:tex_flavor='latex'

" enable vimtex
let g:vimtex_enabled = 1

" Folding options
let g:vimtex_fold_enabled = 1
let g:vimtex_fold_env_whitelist = ['figure', 'table']
"let g:vimtex_fold_manual = 1

" latexmk options

let g:vimtex_latexmk_enabled = 1
let g:vimtex_latexmk_build_dir = 'output'

" }}}
" vmath {{{
vmap <expr> ++ VMATH_YankAndAnalyse()
nmap ++ vip++
" }}}
" incsearch {{{
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" }}}
" grammarous {{{

let g:grammarous#use_vim_spelllang = 1
let g:grammarous#move_to_first_error = 0
let g:grammarous#default_lang = 'en_au'

nnoremap <leader>gg :GrammarousCheck<CR>
nnoremap <leader>gr :GrammarousReset<CR>

" }}}
" isort {{{

let g:vim_isort_map  = '<leader>i'
let g:vim_isort_python_version = 'python3'

"}}}
" template {{{

let g:templates_directory = [$DOTFILES.'/vim/templates']

let g:templates_user_variables = [
            \ ['DIRECTORY', 'GetDirectoryName'],
            \ ]

function! GetDirectoryName()
    " Expand to full path, remove the filename, then get the folder
    return expand('%:p:h:t')
endfunction

" }}}
" iron.nvim {{{

let g:iron_map_defaults = 0
let g:iron_new_python_REPL_hooks = ['import numpy as np']

nmap <leader>p <Plug>(iron-send-motion)
vmap <leader>p <Plug>(iron-send-motion)
"nmap <leader>p <Plug>(iron-repeat-cmd)


" }}}
" vim-online-thesaurus {{{

let g:online_thesaurus_map_keys = 0

nnoremap <leader>y :OnlineThesaurusCurrentWord<CR>

" }}}
" undotree {{{

noremap <leader>u :UndotreeToggle<CR>

" }}}
"  vimterm {{{
if has('nvim')
    nnoremap <leader>vo :call vimterm#toggle() <CR>
    tnoremap <leader>vo <C-\><C-n>:call vimterm#toggle() <CR>
endif

"  }}}
"  Scalpel {{{

nmap <Leader>s <Plug>(Scalpel)

"  }}}
" Tagbar {{{

nnoremap <Leader>t :TagbarToggle<CR>

" }}}
" project-log {{{

let g:project_home = $HOME.'/Projects/'
let g:project_log#logbooks = [
            \ g:project_home.'Dynamics/logbook',
            \ g:project_home.'Crystal_Melting/logbook',
            \ g:project_home.'Machine_Learning/logbook',
            \ g:project_home.'Seminars',
            \ $HOME.'/Documents/diary'
            \ ]
let g:project_log#log_level = 'DEBUG'

"}}}
" pandoc {{{
let g:pandoc#syntax#conceal#use = 1
let g:pandoc#syntax#conceal#urls = 1
let g:pandoc#modules#disabled = ["chdir", "folding"]
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#formatting#textwidth = 100
let g:pandoc#formatting#mode="s"

augroup pandoc_syntax
    autocmd! BufNewFile,BufFilePre,BufRead *.md set filetype=pandoc.markdown
augroup END

" }}}
" lightline {{{
"
" Configuration for ale
let g:lightline = {}

let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "
let g:lightline#ale#indicator_ok = "\uf00c "

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
let g:lightline.component_function = {
      \   'gitbranch': 'fugitive#head',
      \   'wordcount': 'wordCount#WordCount',
      \ }
let g:lightline.component =  {
      \   'lineinfo': '%3l %-2v',
      \ }

let g:lightline.colorscheme  = 'quantum'
let g:lightline.active = {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
      \             [ 'lineinfo' ], [ 'wordcount', 'percent' ], [ 'filetype', 'fileformat' ] ]
      \ }
" }}}
" wordcount {{{ 

let g:wc_conservative_update = 1

"  }}}
" nerdcommenter {{{

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" }}}
" clang-format {{{

let g:clang_format#auto_format=1

"}}}
" Goyo {{{

let g:goyo_width = 100

function! s:goyo_enter()
  " sign unplace *
  ALEDisableBuffer
  exec lightline#disable()
  set noshowmode
  set noshowcmd
  set scrolloff=999
  " let g:ale_enabled = 0
  if has('nvim')
      call deoplete#disable()
  endif
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z; or tmux resize-pane -Z
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z; and tmux resize-pane -Z
  exec lightline#enable()
  set showmode
  set showcmd
  set scrolloff=5
  let g:ale_enabled = 1
  if has('nvim')
      call deoplete#enable()
  endif
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

nnoremap <space>gg :Goyo<CR>

" }}}
" netrw {{{

let g:netrw_banner = 0

" }}}
" Polyglot  {{{
let g:python_highlight_all = 1
" let g:polyglot_disabled = ['markdown']

" }}}
" ncm2 {{{

set completeopt=noinsert,menuone,noselect

augroup ncm2
  autocmd!
  autocmd BufEnter * call ncm2#enable_for_buffer()
augroup END

" supress the annoying 'match x of y', 'The only match' and 'Pattern not
" found' messages
set shortmess+=c

" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu. Use this mapping to close the menu and also start a new
" line.
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" }}}
"
"
" vim: foldmethod=marker foldlevel=0 filetype=vim tabstop=2 softtabstop=2 shiftwidth=2
"
