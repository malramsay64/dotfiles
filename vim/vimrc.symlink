" Malcolm Ramsay  .vimrc
"
"General {{{

if !has('nvim')
    set nocompatible        " explicitly get of of vi compatible mode
    set encoding=utf-8
endif

" load plugins
source $HOME/dotfiles/vim/plugins.vim

" Vim automatically reads changes to a file
set autoread

filetype plugin indent on      "load filetype specific indent and plugin files

" Python support
let g:python2_host_prog = 'python2'
let g:python3_host_prog = 'python3'
"let g:python_host_prog = '/usr/local/conda/3.5.1/bin/python'

"}}}
"Colours {{{

syntax enable           " enable syntax processing

" Enable truecolour support in neovim >= 0.1.5 || vim >= 7.4.1799
if has("termguicolors")
    set termguicolors
endif

" Load colourscheme in vim with tmux
if !has("nvim")
    set t_8b=[48;2;%lu;%lu;%lum
    set t_8f=[38;2;%lu;%lu;%lum
endif

" Set colourshecme
set background=dark " for the dark version
colorscheme one

"}}}
"Spaces and Tabs {{{

set tabstop=4           " number of visual spaces per TAB

set softtabstop=4       " number of spaces inserted upon TAB

set shiftwidth=4        " autoindent amount when using cindent

set expandtab           " TAB inserts softtabstop spaces

set autoindent          " copy indentation from previous line

set smartindent         " inserts extra indentation in some cases

set list                " we want to show tabs

set listchars=tab:>-,trail:-    " show tabs and trailing whitespace

" Remove trailing whitespace from file and return cursor to current position
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l,c)
endfun

" Remove whitespace before writing to files
augroup StripWhitespaces
    autocmd!
    autocmd BufWritePre *.h,*.c,*.cpp,Makefile,*.hoomd,*.py :call <SID>StripTrailingWhitespaces()
augroup END

"}}}
"UI Config {{{

" The combination of relative number and number gives the absolute line
" number for the current line and relative numbers for all others
set relativenumber      " show relative line numbers

set number              " show line numbers

set scrolloff=5         " 5 lines above and below cursor when scrolling

set wildmenu            " visual autocomplete for command

set lazyredraw          " redraw only when need to

set showmatch           " highlight matching parenthesis/bracket/brace

set laststatus=2        " Display statusline

set splitright          "open splits by default to the right

" remap help to open in a vertical split
cabbrev help vert help
cabbrev  h vert h

" common mistypings of exit and save
cabbrev W w
cabbrev Q q
cabbrev Wq wq
cabbrev WQ wq

" Disable mouse 
set mouse=

"}}}
" Custom Shortcuts {{{

" jk is escape
inoremap jk <esc>

" leader is <space>
let mapleader="\<space>"

" go to next split
nnoremap <Leader>w <c-w>w


" Turn off search highlighting
nnoremap <Leader>h :nohlsearch<CR>

" Reload vimrc
nnoremap <Leader>r :source $MYVIMRC<CR>

" Edit vimrc
nnoremap <Leader>er :edit $MYVIMRC<CR>

" Edit plugins
nnoremap <Leader>ep :edit $DOTFILES/vim/plugins.vim<CR>

" Quick spell fix
nnoremap <Leader>s 1z=

" Shortcut for saving as root
cmap w!! w !sudo tee > /dev/null %


"}}}
"Searching {{{

set incsearch " search as characters entered

set hlsearch  " highlight matches

set ignorecase " ignore case when seraching

set smartcase " overrides ignorecase if uppercase characters in search query

set magic     " regular expressions

"}}}
"Folding {{{

set foldenable        " enable folding

set foldlevelstart=5  " have 5 levels open by default

set foldnestmax=6     " 6 nested folds max

set foldmethod=indent " fold based on indent

" set modelines=1       " last line of file is checked to run as a command

"}}}
"Movement {{{

"move verticaly by visual line
"nnoremap j gj
"nnoremap k gk

set backspace=eol,start,indent  " backspace deletes newlines

set whichwrap+=<,>,h,l,[,]      " left right wraps to next/previous lines

" return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$")|
    \   exe "normal! g`\"" |
    \ endif


"}}}
"Backups {{{

set backup          " Performs backups
set writebackup     " perform backup

" Backup directories
set backupdir=~/.vim-tmp,~/.tmp,/tmp/vim
set directory=~/.vim-tmp,~/.tmp,/tmp/vim


set undofile        "persistent undo
set undodir=~/.vim-tmp/undo     "undo directory

"}}}
"Spelling and Files{{{

set spelllang=en_au             " spelling language is english australian
set fileformats=unix,mac,dos    " default line ending is unix

" set filetype defaults
autocmd! BufNewFile,BufRead *.hoomd set ft=python
autocmd! BufNewFile,BufRead *.md set ft=markdown

"}}}
" Plugin Configuration {{{
"
" netrw {{{

" Open explorer to current directory
"nnoremap <Leader>n :20Lexplore<CR>

"let g:netrw_browse_split = 4
"let g:netrw_preview = 1
"let g:netrw_altv = 1
"let g:netrw_liststyle = 3
"let g:netrw_keepdir = 0

" }}}
" nerdtree {{{

" Open explorer to current directory
nnoremap <Leader>n :NERDTreeToggle<CR>

" }}}
" Syntastic {{{

" Use error signs
let g:syntastic_enable_signs = 1
highlight SyntasticErrorSign ctermfg=LightRed

" c++11 support
let g:syntastic_cpp_compiler_options = '-std=c++11 -I$HOME/.local/include'

" Python3 syntax checking
let g:syntastic_python_python_exec = 'python'
let g:syntastic_python_checkers = ['pylint', 'python']

" Latex checking
let g:syntastic_tex_checkers = ['lacheck']

" Bash linting
let g:syntastic_sh_checkers = ['shellcheck', 'sh']
"
" Configure when error checks are run
" Run on open/save
let g:syntastic_check_on_open = 1
" No checks just before quitting
let g:syntastic_check_on_wq = 0

" Configure location list
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"}}}
" airline {{{

let g:airline_theme='one'
let g:airline_powerline_fonts = 1

" Only check for indent and mixed-indent whitespace errors
let g:airline#extensions#whitespace#checks = [ 'indent', 'mixed-indent-file' ]

" Have a wordcount in the following files (search regex)
let g:airline#extensions#wordcount#enabled = 1
let g:airline#extensions#wordcount#filetypes = '\vhelp|vimwiki|markdown|rst|org|text|asciidoc'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.whitespace = 'Œû'

" airline symbols
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'

"}}}
" Vimwiki {{{

"nmap <Leader>w :vsp<CR><Plug>VimwikiIndex
nmap <Leader>wk <Plug>VimwikiDiaryPrevDay
nmap <Leader>wj <Plug>VimwikiDiaryNextDay

"Vimwiki settings
let g:vimwiki_list = [
    \{  'path':    '~/.wiki/',
    \ 'syntax':  'default',
    \ 'ext':     '.wiki',
    \ 'auto_toc':    1,
    \ 'auto_export':    0,
    \ 'diary_rel_path': 'diary/',
    \ 'path_html': '~/wiki_html/'},
    \{ 'path': '~/.taskwiki',
                \ 'syntax': 'default',
                \'ext': '.wiki',
                \'auto_toc': 0,
                \'auto_export': 0,
    \}]

"}}}
" TaskWiki {{{

let g:taskwiki_sort_order='urgency+,due+,project+'

"autocmd! BufReadPost,BufNewFile * set filetype=taskedit

" }}}
" fugitive {{{

nmap <Leader>gc :Gcommit<CR>
nmap <Leader>gs :Gstatus<CR>

" }}}
" neomake {{{

" open loclist quickfix list if errors
let g:neomake_open_list = 1

" run neomake on write
autocmd! BufWritePost * Neomake

" Change colour of warning signs
augroup my_error_signs
    autocmd!
    autocmd ColorScheme * hi NeomakeErrorSign ctermfg=red
    autocmd ColorScheme * hi NeomakeWarningSign ctermfg=yellow
augroup END

" }}}
" vim-taskwarrior {{{

" Highlighting field
let g:task_highlight_field = 0

" Long descriptions
let g:task_rc_override = 'rc.defaultwidth=0'

" Allow changes to data
let g:task_readonly = 0

" Change default fields
let g:task_default_prompt = ['description', 'project', 'tags', 'priority', 'due']


" }}}
" deoplete {{{
if has('python3')
    let g:deoplete#enable_at_startup = 1
endif

let g:deoplete#max_list=7

" <C-h>: close popup
inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"

" <CR> gives newline
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
endfunction

"}}}
"neosnippet {{{

"" Plugin key-mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
"xmap <C-k>     <Plug>(neosnippet_expand_target)

"" Add vim-snippets to path
"let g:neosnippet#enable_snipmate_compatibility = 1
"let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'

"}}}
" ultisnips {{{

let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"

let g:UltiSnipsEditSplit="horizontal"

" Set the documentation style for the snippets
let g:ultisnips_python_style="google"

" Configuration settings
let g:snips_author = "Malcolm Ramsay"
let g:snips_email = "malramsay64@gmail.com"
let g:snips_github = "https://github.com/malramsay64"

" }}}
" vimtex {{{

" enable vimtex
let g:vimtex_enabled = 1

" Folding options
let g:vimtex_fold_enabled = 1
let g:vimtex_fold_manual = 1

" latexmk options

let g:vimtex_latexmk_enabled = 1
let g:vimtek_latexmk_build_dir = '.output'

" }}}
"}}}
" vim:foldmethod=marker:foldlevel=0:filetype=vim
